syntax = "proto3";

package itacho.api.v1.config;
option go_package = "api/v1/config";

import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";
import "validate/validate.proto";

message ServiceDefinition {
  uint64 version = 1 [(validate.rules).uint64.const = 1];
  repeated itacho.api.v1.config.Dependency dependencies = 2 [(validate.rules).repeated.min_items = 1];
}

message Dependency {
  string name = 1 [(validate.rules).string.min_len = 1];
  string cluster_name = 2 [(validate.rules).string.min_len = 1];

  oneof discovery_option {
    option (validate.required) = true;

    string lb = 3;
    google.protobuf.BoolValue sds = 4;
  }

  string host_header = 5; // nullable

  google.protobuf.BoolValue tls = 6; // default to false
  uint64 connect_timeout_ms = 7  [(validate.rules).uint64.gt = 0];

  itacho.api.v1.config.CircuitBreaker circuit_breaker = 8;
  repeated itacho.api.v1.config.Route routes = 9 [(validate.rules).repeated.min_items = 1];
  itacho.api.v1.config.OutlierDetection outlier_detection = 10; // nullable

  // Not used in itacho
  string health_check_path = 11; // nullable

  itacho.api.v1.config.FaultFilterConfig fault_filter_config = 12; // nullable
  itacho.api.v1.config.Headers headers = 13; // nullable
  repeated itacho.api.v1.config.HealthCheck health_checks = 14;
}

message CircuitBreaker {
  uint32 max_connections = 1 [(validate.rules).uint32.gt = 0];
  uint32 max_pending_requests = 2 [(validate.rules).uint32.gt = 0];
  uint32 max_retries = 3[(validate.rules).uint32.gt = 0];
}

message Route {
  oneof path_specifier {
    option (validate.required) = true;

    string prefix = 1;
    string path = 2;
    // reserved 3;
  }
  string method = 4; //nullable
  uint64 timeout_ms = 5 [(validate.rules).uint64.gt = 0];
  itacho.api.v1.config.RetryPolicy retry_policy = 6;
}

message RetryPolicy {
  // ["5xx", "gateway-error", "connect-failure", "retriable-4xx", "refused-stream", "retriable-status-codes"]
  string retry_on = 1 [(validate.rules).string.min_len = 1];
  uint32 num_retries = 2 [(validate.rules).uint32.gt = 0];
  uint32 per_try_timeout_ms = 3 [(validate.rules).uint32.gt = 0];
}

message OutlierDetection {
  // nullable fields
  uint32 consecutive_5xx = 1;
}

message FaultFilterConfig {
  itacho.api.v1.config.FaultDelay delay = 1;
  itacho.api.v1.config.FaultAbort abort = 2;
}

message FaultDelay {
  string type = 1 [(validate.rules).string.const = "fixed"];
  google.protobuf.Duration fixed_delay = 2 [(validate.rules).timestamp.required = true];
  itacho.api.v1.config.FaultFractionalPercent percentage = 3 [(validate.rules).message.required = true];
}

message FaultAbort {
  uint32 http_status = 1 [(validate.rules).uint32.lt = 600];
  itacho.api.v1.config.FaultFractionalPercent percentage = 2 [(validate.rules).message.required = true];
}

message FaultFractionalPercent {
  uint32 numerator = 1 [(validate.rules).uint32.gt = 0];
  string denominator = 2 [(validate.rules).string = {in: ["HUNDRED", "TEN_THOUSAND", "MILLION"]}];
}

message Headers {
  repeated itacho.api.v1.config.HeaderValueOption request_headers_to_add = 1;
}

message HeaderValueOption {
  itacho.api.v1.config.HeaderValue header = 1 [(validate.rules).message.required = true];
  google.protobuf.BoolValue append = 2;
}

message HeaderValue {
  string key = 1 [(validate.rules).string.min_len = 1];
  string value = 2;
}

// https://www.envoyproxy.io/docs/envoy/v1.9.0/api-v2/api/v2/core/health_check.proto#envoy-api-msg-core-healthcheck
// Ported minimum configuration from Envoy API proto. Targeted to grpc health checker.
message HealthCheck {
  google.protobuf.Duration timeout = 1 [(validate.rules).duration = { required: true, gt: {seconds: 0} }];
  google.protobuf.Duration interval = 2 [(validate.rules).duration = { required: true, gt: {seconds: 0} }];
  // Use unwrapped uint32 to require to be set the value.
  uint32 unhealthy_threshold = 3 [(validate.rules).uint32.gt = 0];
  uint32 healthy_threshold = 4 [(validate.rules).uint32.gt = 0];
  google.protobuf.Duration no_traffic_interval = 5 [(validate.rules).duration = {required: true, gt: {seconds: 0}}];
  google.protobuf.Duration unhealthy_interval = 6 [(validate.rules).duration = {required: true, gt: {seconds: 0}}];
  google.protobuf.Duration unhealthy_edge_interval = 7 [(validate.rules).duration = {required: true, gt: {seconds: 0}}];
  google.protobuf.Duration healthy_edge_interval = 8 [(validate.rules).duration = {required: true, gt: {seconds: 0}}];
  string event_log_path = 9 [(validate.rules).string.min_len = 1];
  bool always_log_health_check_failures = 10;
}
